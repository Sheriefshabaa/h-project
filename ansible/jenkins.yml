- name: Jenkins Server Env. Setting Playbook
  hosts: jenkins_server

  tasks:

  # ***** Dependencies Plays *****
  - name: Update apt cache
    apt:
      update_cache: yes
      state: present

  - name: Install Dependencies
    apt:
      name:
        - curl
        - unzip
        - gnupg
      state: present

  # ***** Jenkins Plays *****
  - name: Install Jenkins Repository key
    apt_key:
      url: https://pkg.jenkins.io/debian/jenkins.io-2023.key
      state: present

  - name: Add Jenkins repository
    apt_repository:
      repo: 'deb https://pkg.jenkins.io/debian-stable binary/'
      state: present

  - name: Install Java OpenJDK
    apt:
      name: openjdk-11-jre
      update_cache: yes
      state: present

  - name: Update apt cache
    apt:
      update_cache: yes
      state: present

  - name: Install Jenkins
    apt:
      name: jenkins
      state: present

  - name: Start and Enable Jenkins Service
    systemd:
      name: jenkins
      enabled: yes
      state: started

  - name: Retrieve initialAdminPassword file
    fetch:
      src: /var/lib/jenkins/secrets/initialAdminPassword
      dest: "{{ playbook_dir }}/initialAdminPassword"
      flat: yes

  # ***** Docker Plays *****
  - name: Install Docker
    apt:
      name: docker.io
      state: present
  
  - name: Add Jenkins User to Docker group
    user:
      name: jenkins
      groups: docker
      append: yes

  - name: Add Ubuntu User to Docker group
    user:
      name: ubuntu
      groups: docker
      append: yes

  - name: Start and Enable Docker Service
    systemd:
      name: docker
      enabled: yes
      state: started

  - name: Restart Jenkins and Docker
    systemd:
      name: "{{ item }}"
      state: restarted
    loop:
      - jenkins
      - docker

  # ***** AWS CLI Plays *****
  - name: Download AWS CLI
    get_url:
      url: "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
      dest: "/tmp/awscliv2.zip"

  - name: Unzip AWS CLI package
    unarchive:
      src: "/tmp/awscliv2.zip"
      dest: "/tmp"
      remote_src: yes
    
  - name: Install & Update AWS CLI
    command: "/tmp/aws/install --update"

  # ***** Kubectl Plays *****
  - name: Get the stable kubectl version
    shell: "curl -sL https://dl.k8s.io/release/stable.txt"
    register: kubectl_version
    changed_when: false
    failed_when: kubectl_version.stdout is undefined or kubectl_version.stdout == '' or kubectl_version.stdout | regex_search('html')

  - name: debug Downloaded kubectl version
    debug:
      msg: "Downloaded kubectl version: {{ kubectl_version.stdout }}"
  
  - name: Download kubectl binary
    get_url:
      url: "https://dl.k8s.io/release/{{ kubectl_version.stdout }}/bin/linux/amd64/kubectl"
      dest: "/tmp/kubectl"
      mode: '0755'
    when: kubectl_version.stdout is defined and kubectl_version.stdout != '' and not kubectl_version.stdout | regex_search('html')

  - name: Download kubectl checksum
    get_url:
      url: "https://dl.k8s.io/release/{{ kubectl_version.stdout }}/bin/linux/amd64/kubectl.sha256"
      dest: "/tmp/kubectl.sha256"
      mode: '0644'
    when: kubectl_version.stdout is defined and kubectl_version.stdout != '' and not kubectl_version.stdout | regex_search('html')

  - name: Verify kubectl Binary
    shell: echo "$(cat /tmp/kubectl.sha256)  /tmp/kubectl" | sha256sum --check
    register: kubectl_checksum
    failed_when: "'OK' not in kubectl_checksum.stdout"
    when: kubectl_version.stdout is defined and kubectl_version.stdout != '' and not kubectl_version.stdout | regex_search('html')

  - name: Install kubectl
    become: true
    copy:
      src: /tmp/kubectl
      dest: /usr/local/bin/kubectl
      mode: '0775'
      remote_src: yes
    when: kubectl_checksum.rc == 0

  - name: Verify kubectl version
    command: kubectl version --client
    register: kubectl_version_check
    changed_when: false

  - name: debug Installed kubectl version
    debug:
      msg: "Installed kubectl version: {{ kubectl_version_check.stdout }}"
